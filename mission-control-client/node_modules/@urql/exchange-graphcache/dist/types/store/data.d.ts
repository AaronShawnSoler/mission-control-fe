import { Link, EntityField, FieldInfo, StorageAdapter, SerializedEntries } from '../types';
declare type Dict<T> = Record<string, T>;
declare type KeyMap<T> = Map<string, T>;
declare type OptimisticMap<T> = Record<number, T>;
interface NodeMap<T> {
    optimistic: OptimisticMap<KeyMap<Dict<T | undefined>>>;
    base: KeyMap<Dict<T>>;
    keys: number[];
}
export interface InMemoryData {
    persistenceScheduled: boolean;
    persistenceBatch: SerializedEntries;
    gcScheduled: boolean;
    gcBatch: Set<string>;
    queryRootKey: string;
    refCount: Dict<number>;
    refLock: OptimisticMap<Dict<number>>;
    records: NodeMap<EntityField>;
    links: NodeMap<Link>;
    storage: StorageAdapter | null;
}
export declare const makeDict: () => any;
/** Before reading or writing the global state needs to be initialised */
export declare const initDataState: (data: InMemoryData, optimisticKey: number | null) => void;
/** Reset the data state after read/write is complete */
export declare const clearDataState: () => void;
/** As we're writing, we keep around all the records and links we've read or have written to */
export declare const getCurrentDependencies: () => Set<string>;
export declare const make: (queryRootKey: string) => InMemoryData;
/** Garbage collects all entities that have been marked as having no references */
export declare const gc: (data: InMemoryData) => void;
/** Reads an entity's field (a "record") from data */
export declare const readRecord: (entityKey: string, fieldKey: string) => EntityField;
/** Reads an entity's link from data */
export declare const readLink: (entityKey: string, fieldKey: string) => string | import("../types").NullArray<string> | null | undefined;
/** Writes an entity's field (a "record") to data */
export declare const writeRecord: (entityKey: string, fieldKey: string, value: EntityField) => void;
export declare const hasField: (entityKey: string, fieldKey: string) => boolean;
/** Writes an entity's link to data */
export declare const writeLink: (entityKey: string, fieldKey: string, link: string | import("../types").NullArray<string> | null | undefined) => void;
/** Removes an optimistic layer of links and records */
export declare const clearOptimistic: (data: InMemoryData, optimisticKey: number) => void;
/** Return an array of FieldInfo (info on all the fields and their arguments) for a given entity */
export declare const inspectFields: (entityKey: string) => FieldInfo[];
export declare const hydrateData: (data: InMemoryData, storage: StorageAdapter, entries: SerializedEntries) => void;
export {};
