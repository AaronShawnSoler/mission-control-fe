import { DocumentNode, FragmentDefinitionNode, SelectionNode, GraphQLOutputType, GraphQLWrappingType } from 'graphql';
export declare type NullArray<T> = Array<null | T>;
export declare type SelectionSet = ReadonlyArray<SelectionNode>;
export declare type GraphQLFlatType = Exclude<GraphQLOutputType, GraphQLWrappingType>;
export interface Fragments {
    [fragmentName: string]: void | FragmentDefinitionNode;
}
export declare type Primitive = null | number | boolean | string;
export interface ScalarObject {
    __typename?: never;
    [key: string]: any;
}
export declare type Scalar = Primitive | ScalarObject;
export interface SystemFields {
    __typename: string;
    _id?: string | number | null;
    id?: string | number | null;
}
export declare type EntityField = undefined | Scalar | Scalar[];
export declare type DataField = Scalar | Scalar[] | Data | NullArray<Data>;
export interface DataFields {
    [fieldName: string]: DataField;
}
export interface Variables {
    [name: string]: Scalar | Scalar[] | Variables | NullArray<Variables>;
}
export declare type Data = SystemFields & DataFields;
export declare type Link<Key = string> = null | Key | NullArray<Key>;
export declare type ResolvedLink = Link<Data>;
export declare type Connection = [Variables, string];
export interface FieldInfo {
    fieldKey: string;
    fieldName: string;
    arguments: Variables | null;
}
export interface OperationRequest {
    query: DocumentNode;
    variables?: object;
}
export interface ResolveInfo {
    parentTypeName: string;
    parentKey: string;
    parentFieldKey: string;
    fieldName: string;
    fragments: Fragments;
    variables: Variables;
    partial?: boolean;
    optimistic?: boolean;
}
export interface QueryInput {
    query: string | DocumentNode;
    variables?: Variables;
}
export interface Cache {
    /** keyOfEntity() returns the key for an entity or null if it's unkeyable */
    keyOfEntity(data: Data): string | null;
    /** keyOfField() returns the key for a field */
    keyOfField(fieldName: string, args?: Variables | null | undefined): string | null;
    /** resolve() retrieves the value (or link) of a field on any entity, given a partial/keyable entity or an entity key */
    resolve(entity: Data | string | null, fieldName: string, args?: Variables): DataField;
    /** resolveFieldByKey() returns a field's value on an entity, given that field's key */
    resolveFieldByKey(entity: Data | string | null, fieldKey: string): DataField;
    /** inspectFields() retrieves all known fields for a given entity */
    inspectFields(entity: Data | string | null): FieldInfo[];
    /** invalidateQuery() invalidates all data of a given query */
    invalidateQuery(query: DocumentNode, variables?: Variables): void;
    /** updateQuery() can be used to update the data of a given query using an updater function */
    updateQuery(input: QueryInput, updater: (data: Data | null) => Data | null): void;
    /** readQuery() retrieves the data for a given query */
    readQuery(input: QueryInput): Data | null;
    /** readFragment() retrieves the data for a given fragment, given a partial/keyable entity or an entity key */
    readFragment(fragment: DocumentNode, entity: string | Data, variables?: Variables): Data | null;
    /** writeFragment() can be used to update the data of a given fragment, given an entity that is supposed to be written using the fragment */
    writeFragment(fragment: DocumentNode, data: Data, variables?: Variables): void;
}
export declare type Resolver = (parent: Data, args: Variables, cache: Cache, info: ResolveInfo) => DataField | undefined;
export interface ResolverConfig {
    [typeName: string]: {
        [fieldName: string]: Resolver;
    };
}
export declare type UpdateResolver = (result: Data, args: Variables, cache: Cache, info: ResolveInfo) => void;
export declare type KeyGenerator = (data: Data) => null | string;
export interface UpdatesConfig {
    Mutation: {
        [fieldName: string]: UpdateResolver;
    };
    Subscription: {
        [fieldName: string]: UpdateResolver;
    };
}
export declare type OptimisticMutationResolver = (vars: Variables, cache: Cache, info: ResolveInfo) => null | Data | NullArray<Data>;
export interface OptimisticMutationConfig {
    [mutationFieldName: string]: OptimisticMutationResolver;
}
export interface KeyingConfig {
    [typename: string]: KeyGenerator;
}
export declare type SerializedEntry = EntityField | Connection[] | Link;
export interface SerializedEntries {
    [key: string]: SerializedEntry;
}
export interface StorageAdapter {
    read(): Promise<SerializedEntries>;
    write(data: SerializedEntries): Promise<void>;
}
export declare type ErrorCode = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18;
