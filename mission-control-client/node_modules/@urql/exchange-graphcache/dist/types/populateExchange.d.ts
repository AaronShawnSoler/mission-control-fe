import { DocumentNode, FragmentDefinitionNode, GraphQLSchema, IntrospectionQuery } from 'graphql';
import { Exchange } from 'urql/core';
interface PopulateExchangeOpts {
    schema: IntrospectionQuery;
}
/** An exchange for auto-populating mutations with a required response body. */
export declare const populateExchange: ({ schema: ogSchema, }: PopulateExchangeOpts) => Exchange;
interface TypeFragment {
    /** Operation key where selection set is being used. */
    key: number;
    /** Selection set. */
    fragment: FragmentDefinitionNode;
}
/** Gets typed selection sets and fragments from query */
export declare const extractSelectionsFromQuery: (schema: GraphQLSchema, query: DocumentNode) => FragmentDefinitionNode[][];
/** Replaces populate decorator with fragment spreads + fragments. */
export declare const addFragmentsToQuery: (schema: GraphQLSchema, query: DocumentNode, activeTypeFragments: Record<string, TypeFragment[]>, userFragments: Record<string, FragmentDefinitionNode>) => any;
export {};
