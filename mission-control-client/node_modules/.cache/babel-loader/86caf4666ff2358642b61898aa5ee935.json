{"ast":null,"code":"// Takes in a DateTime object from graphql and returns a formatted\n// string in a human readable format such that it is the difference\n// between the date passed in and the current date in\n// seconds/minutes/days/years\nexport default (str => {\n  const split = str.split('');\n  const result = split.slice(0, 10);\n  const time = result.join('');\n  const timestamp = new Date(time).getTime() / 1000;\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return `${interval} years`;\n  }\n\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return `${interval} months`;\n  }\n\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return `${interval} hours`;\n  }\n\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes`;\n  }\n\n  return `${Math.floor(seconds)} seconds`;\n});","map":{"version":3,"sources":["/home/nil/Projects/mission-control-fe/mission-control-client/src/mappers/mapTime.js"],"names":["str","split","result","slice","time","join","timestamp","Date","getTime","seconds","Math","floor","interval"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,gBAAeA,GAAG,IAAI;AACpB,QAAMC,KAAK,GAAGD,GAAG,CAACC,KAAJ,CAAU,EAAV,CAAd;AACA,QAAMC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAf;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACG,IAAP,CAAY,EAAZ,CAAb;AACA,QAAMC,SAAS,GAAG,IAAIC,IAAJ,CAASH,IAAT,EAAeI,OAAf,KAA2B,IAA7C;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAIJ,IAAJ,KAAaD,SAAS,GAAG,IAA1B,IAAkC,IAA7C,CAAhB;AAEA,MAAIM,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,QAArB,CAAf;;AAEA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAQ,GAAEA,QAAS,QAAnB;AACD;;AACDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,OAArB,CAAX;;AAEA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAQ,GAAEA,QAAS,SAAnB;AACD;;AACDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,KAArB,CAAX;;AAEA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAQ,GAAEA,QAAS,OAAnB;AACD;;AACDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,IAArB,CAAX;;AAEA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAQ,GAAEA,QAAS,QAAnB;AACD;;AACDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAX;;AAEA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAQ,GAAEA,QAAS,UAAnB;AACD;;AAED,SAAQ,GAAEF,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAoB,UAA9B;AACD,CAlCD","sourcesContent":["// Takes in a DateTime object from graphql and returns a formatted\n// string in a human readable format such that it is the difference\n// between the date passed in and the current date in\n// seconds/minutes/days/years\n\nexport default str => {\n  const split = str.split('');\n  const result = split.slice(0, 10);\n  const time = result.join('');\n  const timestamp = new Date(time).getTime() / 1000;\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return `${interval} years`;\n  }\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return `${interval} months`;\n  }\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return `${interval} hours`;\n  }\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes`;\n  }\n\n  return `${Math.floor(seconds)} seconds`;\n};\n"]},"metadata":{},"sourceType":"module"}